'''
Сортировка слиянием
Алгоритм сортировки слиянием (merge sort) является одним из самых эффективных алгоритмов сортировки.

Он основан на принципе "разделяй и властвуй". Он состоит из трех основных шагов:

Разделение: Исходный массив разбивается на две равные части
(или почти равные), пока не останется отдельные элементы.

Слияние: Последовательно сливаются (объединяются) отсортированные
подмассивы, при этом сохраняется упорядоченность элементов.

Рекурсия: Процесс разделения и слияния выполняется рекурсивно для каждой половины массива.

Сложность алгоритма: O(n log n) в среднем и в худшем случае.
'''


def merge(left, right, comparator):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):  # Пока не закончился хотя бы один из массивов

        # Если элемент из левого массива меньше
        if comparator(left[i], right[j]):

            # Добавляем его в результирующий массив
            result.append(left[i])

            # Переходим к следующему элементу в левом массиве
            i += 1
        else:  # Если элемент из правого массива меньше

            # Добавляем его в результирующий массив
            result.append(right[j])

            # Переходим к следующему элементу в правом массиве
            j += 1

    # Добавляем оставшиеся элементы из левого и правого массивов
    result.extend(left[i:])
    result.extend(right[j:])

    return result


def merge_sort(arr, comparator=(lambda x, y: x < y)):
    # Если массив пустой или содержит один элемент, то он уже отсортирован
    if len(arr) <= 1:
        return arr

    # Находим середину массива
    middle = len(arr) // 2

    # Рекурсивно вызываем функцию для левой и правой половин массива
    left = merge_sort(arr[:middle], comparator)
    right = merge_sort(arr[middle:], comparator)

    # Объединяем отсортированные массивы
    return merge(left, right, comparator)
